function [Y,Xf,Af] = net(X,~,~)
%NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Dec-2018 21:06:09.
% 
% [Y] = net(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 12xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0.000440484796706838;-0.000556000911789807;-0.000556060357843804;-0.000556198194121691;-1.81753161481515e-06;-1.80833613176366e-06;-0.098101635;0;0;0];
x1_step1.gain = [440727691.844798;442700241.284788;39984.5733173297;3597.1164032121;3596.73185075674;3595.84051357495;1100393.51376202;1105989.07187095;199.755251925955;17.9557282932629;17.9579167422921;17.9593151203998];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.58994650021423677977;0.66445459628640868299;-0.78703448064068426415;0.56639696808812689532;0.66593025512752268558;-0.45282415194667208214;0.38396647160775049246;0.87923684279097991112;-0.763003426999542822;-0.88247698498433546632];
IW1_1 = [-0.60667131347603375779 -0.48233211430553041277 -0.5197158382385728137 -0.17663785435970541515 0.42102006688286458536 -0.10795943910556161927 -0.60792768544912334505 -0.4834571858447013204 -0.51690532968622082688 -0.0053737727432321361759 0.42236660159788835811 -0.28036032030802038317;-0.0077223174911612993757 -0.0014003707453305225174 0.00052708762418633562426 -0.0028127661134391113672 -0.68616575556771253197 -0.0025567941512719383722 -0.0077337666715054757816 -0.0014021538246873281423 0.0032187766187104448722 -0.0021667918017372667962 -0.91764286799615002455 -0.0043149160721180253308;0.39489885359668724929 -0.11076510743057296771 -0.61680699578662134819 -0.77514906949488604493 0.13494673354614336591 0.15449663462406809655 -0.58382593878145061517 -0.053213065080564260489 -0.47990321610870628755 -0.17546425796450695889 -0.26201832405746833254 0.076566729806534630787;0.0016250746899510409675 0.0062898775972369371304 -0.01043406913548272294 0.33615404883376648337 -0.027975068045391494886 0.33987370031053576458 0.0016411729588698073263 0.0062978578940261591146 -0.014995650456934201539 0.45279923946815381353 -0.037584898806922013847 0.44870600926416159826;0.007547762320860455787 0.0095139340230878787635 -0.0027289562729369441427 0.0027504507464388683845 0.68896526082883413622 0.0031019958122992835788 0.0075565102243546527008 0.0095208927667477429718 -0.0054138189521664402404 0.0026924532284883801597 0.92129313782711175218 0.0042196222661622971931;-0.019693846478686216628 -0.01859531722393068659 -0.61585338979343107191 -0.014402179682432222907 -0.029273873891135945152 0.016726666468156112244 -0.019777241479824701764 -0.018707802680626359898 -0.81549576547989732767 0.022388099393152661315 -0.034942350202214145227 -0.019215657009217023549;0.21644661655815697343 0.16772440818478187574 0.19824740074343932816 -0.31341315607547515221 -0.13787812083128345164 0.41553960595096905983 0.21690116241572202083 0.16812148975095603243 0.20195042382130398706 0.50509919425967853002 -0.13414732669721310399 -0.40269799501768993588;0.10618990610571540922 0.068858523945723906778 0.07135351760087293993 0.44039352218685562379 -0.090423485040704229543 -0.38789959249613287229 0.10641685888553287231 0.069044504192575961721 0.06576016027425345134 -0.54290939569990404046 -0.096375229867480691204 0.59574144320956112786;-0.0028855994830554228953 -0.012619783738856664088 -0.023898418089811204745 0.42292498918725784929 -0.038495253016431259241 0.4199003616055276833 -0.0029046647684717163268 -0.012633204617148407339 -0.029690926499141429007 0.56236040119004893079 -0.051495707810886234834 0.56494685896830909577;-0.14831125755227617113 -0.14452367910877700341 0.857864145536457956 0.035336434374834094219 -0.00063096427756765302401 -0.068319863604273958768 -0.14832075201347513782 -0.14413928248847235336 1.1917780511226370166 -0.076670631682122111772 0.009273553008283350052 0.043418839434482374429];

% Layer 2
b2 = [-0.82927126858422317568;1.2042549526861079379;0.0045851376412687000136;-0.37401911414881916507];
LW2_1 = [0.0089742506428644071292 0.096290792336874209134 -3.46965024505031748e-05 0.013429344894551878062 -0.095351710876478132373 -4.4880732165474155337 0.24623900286688038541 -0.078169967051822122905 0.0093435647595360420831 1.5792952872203682713;-1.3058513115867991239 0.083684962875981636077 8.6834152174088613052e-06 -3.6877997357321929961 -0.084134396143685161173 0.0089162850887871021588 -3.5244176914444649285 1.6696614343530826741 -2.3209297397540651353 -0.0031407428123416646082;-0.055997843229028149148 3.2689361600141126907 7.3252006561694129672e-06 0.022475212714520822338 -3.2453359408357824734 0.051150923035968798303 0.009430358142083110698 0.011799941248853088732 0.00025648458696137785067 -0.018020658151166921157;1.3056018163441032165 0.19547790610591780913 -4.8990025217676474913e-06 -3.6827726605150985506 -0.1947469156886370012 0.17815795221044741781 3.5250145827184966585 -1.6696341574471018632 -2.3177916836552721058 -0.062596058195915085798];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.99013300323123;0.596366082244589;0.595932371164227;0.596024681915328];
y1_step1.xoffset = [-0.000490499999986375;-3.35364478219896;-3.35608551704073;-3.35556573525276];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
